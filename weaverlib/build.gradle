apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'

project.afterEvaluate {
    def androidExtension = project.extensions.findByName("android")
    if (androidExtension.hasProperty('libraryVariants')) {
        androidExtension.libraryVariants.all { final variant ->
            task("${variant.name}Javadoc", type: Javadoc) {
                description "Generates Javadoc for ${variant.name}."
                failOnError = false
                source = variant.javaCompile.source
                classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }
        }
    }
    task androidJavadocsJar(type: Jar, dependsOn: 'releaseJavadoc') {
        classifier = 'javadoc'
        from {
            releaseJavadoc.destinationDir
        }
    }
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from androidExtension.sourceSets.main.java.srcDirs
    }
    publishing.publications {
        release(MavenPublication) {
            groupId "com.weaver.supportm"
            artifactId "weaverlib"
            version "1.0.0"

            artifact bundleReleaseAar
            artifact androidJavadocsJar
            artifact androidSourcesJar


            pom.withXml {
                // List all compile dependencies and write to POM
                final Node dependenciesNode = asNode().appendNode('dependencies')
                final compileConfiguration = configurations.getByName('compile')
                compileConfiguration.allDependencies.each { final Dependency dependency ->
                    final def noGroup = dependency.group == null
                    final def noVersion = dependency.version == null
                    final def noName = dependency.name == null
                    final def invalidName = dependency.name == "unspecified"
                    final def invalidDependency = noGroup || noVersion || noName || invalidName
                    if (invalidDependency) {
                        // ignore invalid dependencies
                        return
                    }
                    final def dependencyFiles = compileConfiguration.files(dependency)
                    final def firstFile = dependencyFiles.first()
                    final def firstFileName = firstFile.name
                    final def firstFileNameExtension = firstFileName.substring(firstFileName.lastIndexOf(".") + 1)

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)
                    dependencyNode.appendNode('type', firstFileNameExtension)

                    if (!dependency.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dependency.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionsNode = dependencyNode.appendNode('exclusions')
                        dependency.properties.excludeRules.each { final ExcludeRule rule ->
                            final exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }
        }
    }
}
publishing {
    repositories {
        maven {
            url "$buildDir/repo"
        }
    }
}


android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debugMini {
            initWith debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            matchingFallbacks = ['debug']
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    androidExtensions {
        experimental = true
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //Android general
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:swiperefreshlayout:28.0.0'
    //Constraint layout
    implementation 'com.android.support.constraint:constraint-layout:2.0.0-beta1'
    //Architecture Components
    implementation "android.arch.lifecycle:extensions:1.1.1"
    implementation "android.arch.lifecycle:common-java8:1.1.1"
    // RecyclerView
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    // CardView
    implementation 'com.android.support:cardview-v7:28.0.0'
    // Retrofit stuff
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    // for firebase
    implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation 'com.google.firebase:firebase-database:16.1.0'
    implementation 'com.google.firebase:firebase-messaging:17.6.0'
    //Picasso
    implementation 'com.squareup.picasso:picasso:2.71828'
    //ExoPlayer
    implementation 'com.google.android.exoplayer:exoplayer-core:2.9.6'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.9.6'
    implementation 'com.google.android.exoplayer:exoplayer-hls:2.9.6'
    implementation 'com.google.android.exoplayer:extension-rtmp:2.9.0'
    //CircleImageView
    implementation 'de.hdodenhof:circleimageview:3.0.0'
    //Testing
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    mavenCentral()
}

